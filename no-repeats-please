//Function which takes the factorial of a number
function perm(num) {
  if (num === 0) {return 1;}
  return num * perm(num-1);
}

//Function counting permutations without adjacent letters
function permAlone(str) {
  //Sort the string alphabetically
  str = str.toUpperCase().split('').sort().join('');
  //Create an array and fill it with duplicates
  var notAlone = [];
  for (i=0; i<str.length; i++) {
    var re = new RegExp(str[i]+ '{2,}', 'g');
    if (str.match(re)) {
      notAlone.push(str[i]);
    }
  }
  //Create a function which identifies clusters of letters
  function permeate(len, reps) {
    return perm(len+1-reps)*perm(len-reps)/perm(len-1-reps);
  }
  if (notAlone.length) {
    //If duplicates exist, create an object to store letters and number of occurrences
    var repeats = {};
    notAlone.forEach(function(x) {repeats[x] = (repeats[x] || 0)+1;}); //Count per letter
    notAlone = notAlone.filter((x,i,arr) => i===arr.indexOf(x)); //Remove duplicates
    
    //Loops through duplicates and calculates permutations
    var numPerms;
    for (i=0; i<notAlone.length; i++) {
      if (str.length < repeats[notAlone[i]]*2-1) {
        //Returns 0 permuations if too many duplicates
        return 0;
      } else if (str.length == repeats[notAlone[i]]*2-1) {
        //Returns calculation of single duplicate letter if it exceeds other letters
        return permeate(str.length, repeats[notAlone[i]]);
      } else {
        //Calculates numPerms and lowers it based on other duplicate letter quantities
        if (i === 0) {
          numPerms = permeate(str.length,repeats[notAlone[i]]);
        } else {
          numPerms -= 2*permeate(str.length-1, repeats[notAlone[i]]);
        }
      }
    }
    //Return the number of permutations of the repeated-lettered word
    return numPerms;
  }
  //Return the number of permutations of the uniquely-lettered word
  return perm(str.length);
}
permAlone('aabbb');
